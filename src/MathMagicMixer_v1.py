
from z3 import *

#checks if x is an element in l
def oneOf(x, l):
    return Or([ x == p for p in l ])

target = 23
lst = [ 5, 6, 1, 4, 2 ]

a, b, c, d, e = Ints('a b c d e')

#main
w = Solver()
w.add(Or(a * b * c * d * e == target,
      a * b * c * d + e == target,
      a * b * c * d - e == target,
      a * b * c + d * e == target,
      a * b * c + d + e == target,
      a * b * c + d - e == target,
      a * b * c - d * e == target,
      a * b * c - d + e == target,
      a * b * c - d - e == target,
      a * b + c * d * e == target,
      a * b + c * d + e == target,
      a * b + c * d - e == target,
      a * b + c + d * e == target,
      a * b + c + d + e == target,
      a * b + c + d - e == target,
      a * b + c - d * e == target,
      a * b + c - d + e == target,
      a * b + c - d - e == target,
      a * b - c * d * e == target,
      a * b - c * d + e == target,
      a * b - c * d - e == target,
      a * b - c + d * e == target,
      a * b - c + d + e == target,
      a * b - c + d - e == target,
      a * b - c - d * e == target,
      a * b - c - d + e == target,
      a * b - c - d - e == target,
      a + b * c * d * e == target,
      a + b * c * d + e == target,
      a + b * c * d - e == target,
      a + b * c + d * e == target,
      a + b * c + d + e == target,
      a + b * c + d - e == target,
      a + b * c - d * e == target,
      a + b * c - d + e == target,
      a + b * c - d - e == target,
      a + b + c * d * e == target,
      a + b + c * d + e == target,
      a + b + c * d - e == target,
      a + b + c + d * e == target,
      a + b + c + d + e == target,
      a + b + c + d - e == target,
      a + b + c - d * e == target,
      a + b + c - d + e == target,
      a + b + c - d - e == target,
      a + b - c * d * e == target,
      a + b - c * d + e == target,
      a + b - c * d - e == target,
      a + b - c + d * e == target,
      a + b - c + d + e == target,
      a + b - c + d - e == target,
      a + b - c - d * e == target,
      a + b - c - d + e == target,
      a + b - c - d - e == target,
      a - b * c * d * e == target,
      a - b * c * d + e == target,
      a - b * c * d - e == target,
      a - b * c + d * e == target,
      a - b * c + d + e == target,
      a - b * c + d - e == target,
      a - b * c - d * e == target,
      a - b * c - d + e == target,
      a - b * c - d - e == target,
      a - b + c * d * e == target,
      a - b + c * d + e == target,
      a - b + c * d - e == target,
      a - b - c - d * e == target,
      a - b - c - d + e == target,
      a - b - c - d - e == target,
      a - b + c + d * e == target,
      a - b + c + d + e == target,
      a - b + c + d - e == target,
      a - b + c - d * e == target,
      a - b + c - d + e == target,
      a - b + c - d - e == target,
      a - b - c * d * e == target,
      a - b - c * d + e == target,
      a - b - c * d - e == target,
      a - b - c + d * e == target,
      a - b - c + d + e == target,
      a - b - c + d - e == target),
      oneOf(a, lst),
      oneOf(b, lst),
      oneOf(c, lst),
      oneOf(d, lst),
      oneOf(e, lst),
      Distinct(a, b, c, d, e))
#print all satisfying models
while w.check() == sat:
    print ("(", w.model()[a], w.model()[b], w.model()[c], w.model()[d], w.model()[e], ")")
    w.add(a != w.model()[a],
          b != w.model()[b],
          c != w.model()[c],
          d != w.model()[d],
          e != w.model()[e])
